'use strict';
(function(n, z, A) {
    n.module("skyApp.users").constant("AWS", z).constant("AWSCognito", A).provider("AWSService", ["AWS", "AWSCognito",
        function(e, h) {
            var b = this;
            e.config.region = "us-east-1";
            b.c = null;
            b.a = null;
            b.b = {};
            b.setArn = function(d) {
                d && (b.c = d)
            };
            b.setIdentityPool = function(d) {
                d && (b.a = d)
            };
            b.setRegion = function(d) {
                d && (b.region = d, e.config.region = d, h.config.region = d)
            };
            b.setLogger = function(d) {
                d && (e.config.logger = d)
            };
            b.setAMAOptions = function(d) {
                d && (b.i = d)
            };
            b.setUserPoolOptions = function(d) {
                d && (b.b.f =
                    d.UserPoolId, b.b.g = d.ClientId)
            };
            b.$get = ["$q", "$cacheFactory", "$log",
                function(d, g) {
                    function p(a) {
                        var f = {
                                get: "get",
                                put: "put",
                                update: "update",
                                bget: "batchGet",
                                bwrite: "batchWrite",
                                query: "query"
                            },
                            c = d.defer();
                        k.then(function() {
                            var l = q.get(JSON.stringify(a));
                            l || (l = new e.DynamoDB.DocumentClient(a), q.put(JSON.stringify(a), l));
                            var b = {};
                            b.ops = b.db = l;
                            b["do"] = function(a, c) {
                                var b;
                                (b = f[a]) || d.reject("Operation not supported: " + a);
                                return b ? this.db[b](c).promise() : null
                            };
                            c.resolve(b)
                        });
                        return c.promise
                    }
                    var r = g("s3Cache"),
                        t = g("cog"),
                        u = g("sns"),
                        v = g("sqs"),
                        w = g("syn");
                    g("api");
                    var x = g("ama"),
                        y = g("lmb"),
                        q = g("dynamo");
                    g("userPool");
                    var m = d.defer(),
                        k = m.promise;
                    g = {
                        signOut: function() {
                            var a = d.defer();
                            void 0 !== e.config.credentials && null !== e.config.credentials ? e.config.credentials.clearCachedId() : a.resolve();
                            return a.promise
                        },
                        credentials: function() {
                            return k
                        },
                        setToken: function(a, f) {
                            var c = d.defer();
                            a = {
                                IdentityPoolId: b.a,
                                RoleArn: b.c,
                                Logins: {
                                    "accounts.google.com": a
                                }
                            };
                            f && (a.m = f);
                            b.config = a;
                            e.config.credentials = new e.CognitoIdentityCredentials(a);
                            e.config.credentials.get(function() {
                                m.resolve(e.config.credentials);
                                c.resolve(!0)
                            });
                            return c.promise
                        },
                        setCognitoToken: function(a) {
                            var f = d.defer(),
                                c = {};
                            c["cognito-idp.us-east-1.amazonaws.com/" + b.b.f] = a;
                            a = {};
                            a.IdentityPoolId = e.config.credentials.params.IdentityPoolId;
                            a.IdentityId = e.config.credentials.params.identityId;
                            a.RoleArn = b.c;
                            a.Logins = c;
                            b.config = a;
                            h.config.credentials = new e.CognitoIdentityCredentials(a);
                            h.config.credentials.clearCachedId();
                            h.config.credentials.get(function(a) {
                                a ? (console.log(a),
                                    f.reject(a)) : (m.resolve(e.config.credentials), e.config.credentials = h.config.credentials, f.resolve(!0))
                            });
                            return f.promise
                        },
                        lambda: function(a) {
                            var b = d.defer();
                            k.then(function() {
                                var c = y.get(JSON.stringify(a));
                                c || (c = new e.Lambda(a), y.put(JSON.stringify(a), c));
                                b.resolve(c)
                            });
                            return b.promise
                        },
                        ama: function(a) {
                            var f = d.defer();
                            k.then(function() {
                                var c = x.get(JSON.stringify(a));
                                c || (c = new AMA.Manager(b.i), x.put(JSON.stringify(a), c));
                                f.resolve(c)
                            });
                            return f.promise
                        },
                        s3: function(a) {
                            var b = d.defer();
                            k.then(function() {
                                var c =
                                    r.get(JSON.stringify(a));
                                c || (c = new e.S3(a), r.put(JSON.stringify(a), c));
                                b.resolve({
                                    v: c,
                                    putObject: function(a) {
                                        return c.putObject(a).promise()
                                    },
                                    getObject: function(a) {
                                        return c.getObject(a).promise()
                                    },
                                    getSignedUrl: function(a, b) {
                                        return c.getSignedUrl(a, b)
                                    }
                                })
                            });
                            return b.promise
                        }
                    };
                    g.dynamo = p;
                    p["do"] = function() {};
                    g.syn = function(a) {
                        var f = d.defer();
                        k.then(function(c) {
                            var d = w.get(JSON.stringify(a));
                            d || (d = new e.CognitoSync({
                                IdentityId: c.identityId,
                                IdentityPoolId: b.a
                            }), d.config.logger = console, w.put(JSON.stringify(a),
                                d));
                            f.resolve(d.u)
                        });
                        return f.promise
                    };
                    g.cog = function(a) {
                        return this.w().then(function() {
                            var b = d.defer();
                            k.then(function() {
                                var c = t.get(JSON.stringify(a));
                                c || (c = new e.CognitoSyncManager(a), t.put(JSON.stringify(a), c));
                                b.resolve({
                                    o: c,
                                    j: function(a) {
                                        var b = d.defer();
                                        c.j(a, function(a, c) {
                                            a ? b.reject(a) : console.log(c);
                                            b.resolve(c)
                                        });
                                        return b.promise
                                    },
                                    l: function() {
                                        return d.when(c.l())
                                    }
                                })
                            });
                            return b.promise
                        })
                    };
                    g.getUserPool = function() {
                        var a;
                        if (!a) {
                            e.config.region = b.region;
                            e.config.credentials = new e.CognitoIdentityCredentials({
                                IdentityPoolId: b.a
                            });
                            h.config.credentials || (h.config.region = b.region, h.config.credentials = new e.CognitoIdentityCredentials({
                                IdentityPoolId: b.a
                            }));
                            var f = {};
                            f.UserPoolId = b.b.f;
                            f.ClientId = b.b.g;
                            a = new h.CognitoIdentityServiceProvider.CognitoUserPool(f);
                            h.config.update({
                                accessKeyId: "doesnt",
                                secretAccessKey: "matter"
                            })
                        }
                        f = {};
                        f.obj = a;
                        f.registerUser = function(c, b, f) {
                            var e = d.defer(),
                                g = [];
                            n.forEach(f, function(a, b) {
                                var c = {};
                                c.Name = b;
                                c.Value = a;
                                g.push(new h.CognitoIdentityServiceProvider.CognitoUserAttribute(c))
                            });
                            a.signUp(c, b, g, null,
                                function(a, c) {
                                    a ? (e.reject(a), console.log(a)) : (console.log(c), e.resolve(c))
                                });
                            return e.promise
                        };
                        f.authenticateUser = function(a, b) {
                            var f = {};
                            f.Username = a;
                            f.Password = b;
                            var e = new h.CognitoIdentityServiceProvider.AuthenticationDetails(f),
                                g = new h.CognitoIdentityServiceProvider.CognitoUser({
                                    Username: a,
                                    Pool: this.obj
                                });
                            return d(function(a, b) {
                                g.authenticateUser(e, {
                                    onSuccess: function() {
                                        a(g)
                                    },
                                    onFailure: function(a) {
                                        return b(a)
                                    }
                                })
                            })
                        };
                        f.resetPassword = function() {
                            return d.defer().reject("TODO: Implement password reset handler")
                        };
                        return d.when(f)
                    };
                    g.sns = function(a) {
                        var b = d.defer();
                        k.then(function() {
                            var c = u.get(JSON.stringify(a));
                            c || (c = new e.SNS(a), u.put(JSON.stringify(a), c));
                            b.resolve(c)
                        });
                        return b.promise
                    };
                    g.sqs = function(a) {
                        var b = d.defer();
                        k.then(function() {
                            var c = v.get(JSON.stringify(a)),
                                g = d.defer();
                            c ? g.resolve(c) : (new e.SQS).s(a, function(b, d) {
                                d ? (c = d.h, v.put(JSON.stringify(a), c), g.resolve(c)) : g.reject(b)
                            });
                            g.promise.then(function(a) {
                                a = new e.SQS({
                                    params: {
                                        h: a
                                    }
                                });
                                b.resolve(a)
                            })
                        });
                        return b.promise
                    };
                    return g
                }
            ]
        }
    ])
})(window.angular,
    window.AWS, window.AWSCognito);
//# sourceMappingURL=awsservice.min.js.map
